// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id        String       @id @unique @default(cuid())
  name      String
  email     String       @unique
  cnpj      String       @unique
  phone     String       @unique
  password  String
  url_image String?
  type      ProviderType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  service  Service[]
  schedule Schedule[]

  company  Company?

  addressId String
  address   Address @relation(fields: [addressId], references: [id])
}

enum ProviderType {
  PHYSICAL
  LEGAL
}

model Client {
  id String @id @unique @default(cuid())

  name     String
  email    String  @unique
  cpf      String  @unique
  phone    String  @unique
  password String
  url_img  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedule   Schedule[]
  assessment Assessment[]

  addressId String
  address   Address @relation(fields: [addressId], references: [id])
}

model Address {
  id        String     @id @unique @default(cuid())
  street    String
  number    String
  city      String
  state     String
  country   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  client    Client[]
  provider  Provider[]
}

model Company {
  id             String  @id @unique @default(cuid())
  company_name   String
  url_img        String
  background_img String?
  description    String?

  provider   Provider     @relation(fields: [providerId], references: [id])
  providerId String       @unique
  assessment Assessment[]

  employee Employee[]
}

model Employee {
  id          String  @id @unique @default(cuid())
  name        String
  phone       String  @unique
  url_img     String?
  description String?

  service    Service[]
  company    Company   @relation(fields: [companyId], references: [id])
  companyId  String
}

model Service {
  id          String   @id @unique @default(cuid())
  name        String
  description String
  price       Float
  url_img     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Provider   Provider     @relation(fields: [providerId], references: [id])
  providerId String
  employee   Employee     @relation(fields: [employeeId], references: [id])
  employeeId String
  schedule   Schedule[]
  assessment Assessment[]
}

model Schedule {
  id        String         @id @unique @default(cuid())
  status    ScheduleStatus
  startTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client     Client    @relation(fields: [clientId], references: [id])
  clientId   String
  service    Service   @relation(fields: [serviceId], references: [id])
  serviceId  String
  Provider   Provider @relation(fields: [providerId], references: [id])
  providerId String
}

enum ScheduleStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Assessment {
  id        String   @id @unique @default(cuid())
  note      Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client    Client   @relation(fields: [clientId], references: [id])
  clientId  String
  service   Service? @relation(fields: [serviceId], references: [id])

  serviceId String?
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
}
